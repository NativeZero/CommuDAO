import React from 'react'
import { ethers } from 'ethers'
import { readContract, readContracts, prepareWriteContract, waitForTransaction, writeContract } from '@wagmi/core'
import { useAccount, useNetwork } from 'wagmi'
import { ThreeDots } from 'react-loading-icons'
const { ethereum } = window

const herocatBKC = '0x2F022D4Ef37847304eCd167303aeaA9699F73663'
const herocatBBQ = '0x9cD236a18D1792993beCff9E525902a5B6ef4483'
const bbqBridge = '0x0A071C71C2502ef7273eedFeFa54E23329e62e9f'
const bkcBridge = '0x03088437f7bE4342e17a9492EBaAAE23d6f96208'

const salmBKC = '0xBc57A8D5456c145a09557e0aD0C5959948e0cf7E'
const aguaBKC = '0x024C5bbF60b3d89AB64aC49936e9FE384f781c4b'
const cosmosBKC = '0x8b062b96Bb689833D7870a0133650FA22302496d'
const goldBKC = '0x794a7b0249eE38FCa6429DE90924113dc9566748'
const dmBKC = '0x8AB1fcBe9f65b86a52c34FeE9b29679f70D8f6fA'
const engyBBQ = '0xBF389F85E4F71a78850Cca36c01430bC5b20e802'
const gemBBQ = '0x222B20bCBBa261DfaaEEe6395f672F15c4d7e88F'
const cmmBKC = '0x9B005000A10Ac871947D99001345b01C1cEf2790'
const cmmOP = '0xd7ee783dfe4ba0ee3979c392f82e0a93d06fc27e'
const bbqTokensBridge = '0xEe44A885Bd7CC635f6b5Ac13EdA0a0ba25552360'
const bkcTokensBridge = '0x2Ce7d537A30FAd10cB0E460604e45D9D2460D66A'
const opTokensBridge = '0xAFb2a3A553574191cC6214D0AAd7864C9B5EFEf7'

const providerBKC = new ethers.getDefaultProvider('https://rpc.bitkubchain.io')
const providerBBQ = new ethers.getDefaultProvider('https://bbqchain-rpc.commudao.xyz')

const eligibleArr = [12845056,67108864,174325760,219414528,135528448,191102976,1703936,145620992,131072,0,127664128,12713984,66977792,174587904,220069888,135397376,190840832,1572864,145752064,262144,13107200,
12582912,66846720,174456832,219807744,135266304,190447616,1441792,145358848,393216,27525120,12451840,66584576,174194688,219545600,135135232,190578688,1310720,145489920,12976128,41025536,
12320768,66715648,174063616,219152384,135004160,190709760,1048576,144703488,13238272,54132736,12189696,66453504,173408256,218890240,134873088,190316544,1179648,145227776,13369344,54263808,
12058624,66322432,173670400,219021312,134742016,190054400,917504,145096704,27656192,54394880,11927552,66060288,173277184,219283456,134610944,190185472,786432,144572416,27787264,75890688,
11796480,66191360,173539328,218759168,134479872,189792256,655360,144834560,27918336,101580800,11665408,65929216,173932544,218365952,134348800,189923328,524288,144310272,41156608,101711872,
11534336,65798144,172883968,218628096,134217728,206176256,14680064,144441344,41287680,101842944,11403264,65667072,172752896,218234880,134086656,206045184,14548992,144965632,41418752,101974016,
11272192,65536000,172359680,218103808,133955584,205914112,14417920,144179200,54525952,114819072,11141120,65404928,172621824,217972736,133824512,205783040,14155776,143917056,54657024,114950144,
11010048,65273856,173801472,218497024,133693440,205651968,14286848,161349632,54788096,127795200,10878976,65142784,173146112,217841664,133562368,205520896,14024704,161218560,76021760,127926272,
10747904,65011712,173015040,226099200,133431296,205389824,13893632,161087488,76152832,128057344,10485760,64880640,172490752,226230272,133300224,205258752,13762560,161611776,76283904,128188416,
10616832,64749568,172228608,225837056,133169152,205127680,13500416,161480704,88866816,75235328,10354688,64618496,172097536,225968128,133038080,204996608,13631488,188088320,88997888,75366400,
10223616,64356352,171966464,239992832,132907008,204865536,29229056,187957248,89128960,75497472,10092544,64487424,171835392,239861760,132775936,204734464,29097984,187826176,101449728,75628544,
9961472,64225280,171704320,239730688,132644864,204603392,28966912,187695104,102105088,75759616,9830400,64094208,171573248,239599616,132513792,204472320,28835840,187564032,102236160,265945088,
9699328,88735744,171442176,239468544,132382720,204341248,28704768,189661184,102367232,265945089,9568256,88604672,170786816,239206400,132251648,204210176,28573696,189530112,102498304,265945090,
9437184,88473600,171311104,239337472,131989504,203948032,28442624,189399040,115867648,265945091,9306112,88342528,171180032,238944256,131858432,204079104,28311552,189267968,115736576,266076160,
9175040,88211456,171048960,239075328,131727360,203816960,28180480,189136896,115605504,266076161,9043968,88080384,170917888,238682112,127533056,203685888,28049408,203554816,115474432,266076162,
8912896,87949312,170655744,238551040,120979456,217710592,42729472,203423744,115343360,266076163,8650752,87818240,170131456,238419968,120848384,217579520,42598400,203292672,115212288,266207232,
8781824,87687168,170393600,238813184,120717312,217448448,42467328,203161600,115081216,266207233,8519680,87556096,170524672,238157824,120586240,217317376,42336256,213123072,129105920,266207234,
8388608,87425024,170000384,238288896,120455168,216924160,42205184,212860928,128974848,266207235,8257536,87293952,170262528,238026752,120324096,217055232,42074112,212729856,128843776,266338304,
8126464,87162880,169869312,237895680,120193024,217186304,41943040,212992000,128581632,266338305,7864320,87031808,169738240,237764608,120061952,216793088,41811968,212598784,128712704,266338306,
7995392,86900736,169213952,237633536,119930880,216662016,41680896,213778432,128450560,266338307,7733248,86769664,169345024,237371392,119799808,216530944,41549824,213647360,128319488,266469376,
7602176,86638592,169607168,237240320,119668736,216399872,55574528,213516288,142868480,266469377,7471104,86507520,169476096,237109248,119406592,216137728,55443456,213385216,142737408,266469378,
7340032,86376448,169082880,237502464,119537664,216006656,55312384,213254144,142475264,266469379,7208960,86245376,168820736,236978176,119275520,216268800,55181312,226885632,142606336,266600448,
7077888,86114304,168689664,236847104,119144448,215875584,55050240,226754560,142344192,266600449,6946816,85983232,168951808,236716032,119013376,215744512,54919168,226623488,142213120,266600450,
6815744,85852160,168558592,236584960,118882304,215351296,63569920,227803136,142082048,266600451,6553600,85721088,168427520,236453888,118751232,215613440,63700992,227672064,141950976,
6684672,85590016,168165376,236322816,118620160,215220224,63832064,227409920,143785984,6422528,85458944,168296448,236191744,118489088,215482368,63963136,227540992,143654912,
6291456,85327872,167903232,236060672,118358016,214827008,77332480,227278848,143392768,6160384,85196800,168034304,235929600,118226944,214958080,76808192,227147776,143261696,
6029312,85065728,167772160,235798528,118095872,215089152,76939264,227016704,142999552,5898240,84934656,167378944,235667456,117833728,214695936,77070336,240386048,143130624,
5767168,84803584,167641088,235536384,117964800,214564864,76677120,240517120,143523840,5636096,84672512,167510016,235405312,107741184,214433792,76546048,241565696,25952256,
5505024,84541440,167247872,235143168,107610112,214302720,76414976,241434624,26214400,5373952,84410368,167116800,235274240,107479040,214171648,77201408,241303552,26083328,
5242880,84279296,166985728,234487808,107347968,214040576,77463552,241172480,26476544,5111808,84148224,166723584,234881024,107216896,213909504,77594624,241041408,26345472,
4980736,84017152,166854656,234618880,107085824,232128512,90177536,240910336,160956416,4849664,83886080,166592512,234749952,106823680,231866368,90439680,240779264,160825344,
4718592,83755008,166461440,235012096,106954752,231997440,90046464,240648192,187301888,4587520,83492864,166330368,234225664,106692608,231735296,89915392,255721472,187432960,
4456448,83623936,166199296,234356736,106561536,231604224,89653248,255590400,188874752,25821184,83361792,166068224,234094592,106430464,231473152,89784320,255459328,189005824,
25690112,83230720,165937152,233963520,106299392,231342080,89522176,255328256,202899456,25559040,83099648,165675008,233832448,106168320,230948864,89391104,255197184,203030528,
25427968,82968576,165806080,233701376,105906176,231079936,89260032,255066112,212336640,25296896,82837504,165543936,233570304,106037248,231211008,90308608,254935040,212467712,
22544384,82706432,175505408,233439232,105775104,230817792,101318656,254803968,226361344,22413312,82575360,175636480,233177088,105644032,230555648,103284736,254672896,226492416,
22282240,82444288,184549376,233046016,105512960,230686720,103415808,254541824,240123904,22151168,82313216,184287232,233308160,105381888,230293504,103153664,254410752,240254976,
22020096,82182144,184156160,232914944,105250816,230424576,103022592,254279680,21889024,82051072,184025088,232390656,105119744,229769216,102891520,254148608,
21757952,81920000,183631872,232521728,104988672,229900288,102629376,254017536,21626880,81788928,183500800,232652800,104857600,230162432,102760448,253886464,
21495808,81657856,183369728,232783872,104595456,230031360,104333312,253755392,21364736,81526784,183238656,232259584,101187584,229638144,104202240,253624320,
21233664,81395712,182845440,253493248,93061120,229507072,104464384,265814016,21102592,81264640,183762944,253362176,92930048,229376000,103940096,265814017,
20971520,81133568,183894016,253231104,92798976,229244928,103809024,265814018,20840448,81002496,183107584,253100032,92667904,229113856,104071168,265814019,
20709376,80871424,182976512,252968960,92536832,228851712,103677952,265814020,20578304,80740352,182714368,252837888,92405760,228982784,103546880,265814021,
20447232,80609280,182583296,252706816,92274688,228589568,104726528,265814022,20316160,80478208,182321152,252575744,92143616,228720640,116523008,20185088,80347136,182452224,252444672,91881472,228458496,116391936,
20054016,101056512,182190080,252313600,92012544,228327424,116260864,19922944,100925440,181534720,252182528,91750400,228065280,116129792,19791872,100794368,181796864,252051456,91488256,228196352,115998720,
19660800,100663296,181665792,251920384,91357184,227934208,117571584,19529728,100532224,181010432,251789312,91619328,246022144,117702656,19398656,100401152,181403648,251658240,91226112,245891072,117440512,
19267584,100270080,181272576,251527168,91095040,245760000,117309440,19136512,100139008,180879360,251396096,90963968,245628928,117178368,19005440,100007936,180748288,251265024,90832896,245497856,117047296,
18874368,99876864,181927936,251133952,90701824,245366784,116916224,18743296,99745792,182059008,251002880,90570752,245235712,116785152,18612224,99352576,181141504,250871808,80216064,245104640,116654080,
18481152,99614720,180617216,250740736,80084992,244973568,129236992,18350080,99483648,180092928,250609664,79953920,244842496,129499136,18087936,99221504,180224000,250478592,79822848,244711424,129630208,
18219008,99090432,179961856,250347520,79691776,244580352,129761280,17825792,98959360,180355072,250216448,79560704,244449280,131596288,17956864,98828288,180486144,250085376,79429632,244318208,131465216,
17694720,98697216,179175424,249954304,79298560,244187136,131334144,17432576,98566144,179306496,249823232,79167488,244056064,131203072,17563648,98435072,179830784,249692160,79036416,243924992,131072000,
17301504,98304000,179699712,249561088,78905344,243793920,130940928,17170432,98172928,179437568,249430016,78774272,243662848,130809856,16908288,98041856,178913280,249298944,78643200,243531776,130678784,
17039360,97910784,179568640,249167872,78512128,243400704,130547712,16777216,97779712,179044352,249036800,78381056,243269632,130416640,16646144,97648640,178651136,248905728,78249984,243138560,130285568,
16384000,97517568,178782208,248774656,78118912,243007488,130154496,16515072,97255424,178520064,248643584,77987840,242876416,130023424,16252928,97386496,178388992,248512512,77856768,242745344,129892352,
16121856,96993280,178257920,248381440,77725696,242614272,132120576,15990784,97124352,177733632,248250368,74973184,242483200,40894464,15859712,96862208,177995776,248119296,74842112,242352128,40763392,
15597568,96731136,177864704,247988224,74711040,242221056,40632320,15728640,96600064,177209344,247857152,74579968,242089984,40501248,15335424,96468992,177078272,247726080,74448896,241958912,54001664,
15466496,96337920,177340416,247595008,74317824,241827840,63438848,15204352,96075776,176816128,247463936,74186752,241696768,63176704,15073280,96206848,178126848,247332864,73924608,260046848,63307776,
14942208,95813632,177602560,247201792,74055680,259915776,62914560,14811136,95944704,177471488,247070720,73793536,259784704,63045632,40239104,95682560,176947200,246939648,73662464,259653632,62783488,
40108032,95420416,176685056,246808576,73531392,259522560,62652416,39976960,95551488,176160768,246677504,73400320,259391488,62521344,39714816,95289344,176291840,246546432,73269248,259260416,62259200,
39845888,95158272,176553984,246415360,73138176,259129344,61734912,39583744,95027200,176422912,246284288,73007104,258998272,62390272,39452672,94765056,175767552,246153216,72876032,258867200,62128128,
39190528,94896128,176029696,265682944,72744960,258736128,61997056,39321600,94633984,175898624,265551872,72613888,258605056,61865984,39059456,94502912,184418304,265420800,72482816,258473984,61603840,
38928384,94371840,202768384,265289728,45350912,258342912,61472768,38797312,94240768,202244096,265158656,45219840,258211840,61341696,38666240,94109696,202637312,265027584,45088768,258080768,61079552,
38535168,93978624,202506240,264896512,44957696,257949696,61210624,38404096,93847552,202375168,264765440,44826624,257818624,60948480,38273024,93716480,202113024,264634368,44695552,257687552,60817408,
38010880,93585408,201981952,264503296,44564480,257556480,60686336,38141952,93454336,201326592,264372224,44433408,257425408,60555264,37879808,93323264,201850880,264241152,44302336,257294336,60424192,
37748736,93192192,201588736,264110080,44171264,257163264,60162048,37617664,114688000,201719808,263979008,44040192,257032192,60293120,37355520,114425856,201457664,263847936,43909120,256901120,60030976,
37486592,114556928,201195520,263716864,43778048,256770048,59768832,37224448,114294784,201064448,263585792,43646976,256638976,59899904,37093376,114163712,200933376,263454720,43515904,256507904,59637760,
36962304,114032640,200802304,263323648,43384832,256376832,59506688,36831232,113901568,200671232,263192576,43253760,256245760,59375616,36700160,113770496,200146944,263061504,43122688,256114688,59244544,
36569088,113639424,200540160,262930432,42991616,255983616,58982400,36438016,113508352,199622656,262799360,42860544,255852544,59113472,36306944,113377280,200409088,262668288,40370176,
58851328,36175872,113246208,200015872,262537216,31719424,58720256,
36044800,113115136,199753728,262406144,31588352,58589184,35913728,112852992,200278016,262275072,31457280,58458112,35782656,112721920,199884800,262144000,31326208,58327040,35651584,112984064,199491584,262012928,31195136,58195968,
35520512,112590848,198180864,261881856,31064064,58064896,35389440,112328704,199098368,261750784,30932992,57933824,35258368,112459776,198443008,261619712,30801920,57802752,35127296,112197632,198836224,261488640,30670848,57540608,
34996224,112066560,198705152,261357568,30539776,57671680,34865152,111935488,198967296,261226496,30408704,57409536,34734080,111804416,198574080,261095424,30277632,57016320,34471936,111673344,199360512,260964352,30146560,57278464,
34603008,111542272,199229440,260833280,30015488,56885248,34340864,111411200,198049792,260702208,29884416,57147392,34209792,111280128,197918720,260571136,29753344,56623104,34078720,111149056,197787648,260440064,29622272,56754176,
33947648,111017984,197656576,260308992,29491200,56492032,33816576,110886912,198311936,260177920,29360128,56360960,33685504,110755840,197263360,25165824,56098816,33554432,110624768,197001216,25034752,56229888,
33423360,110362624,197132288,24903680,55967744,33292288,110493696,197394432,24772608,55836672,33161216,110231552,197525504,24641536,55705600,33030144,110100480,196870144,24510464,160694272,32899072,109969408,196739072,24379392,160563200,
32768000,109838336,196345856,24248320,160432128,32636928,109707264,196476928,24117248,160301056,32505856,109576192,196608000,23855104,160169984,32374784,109445120,196214784,23986176,160038912,32243712,109314048,196083712,23724032,159907840,
32112640,109182976,195952640,23592960,159776768,31981568,109051904,195559424,23461888,159645696,31850496,108789760,195821568,23330816,159514624,53739520,108920832,195690496,23199744,159383552,53870592,108658688,195428352,23068672,159252480,
53477376,108527616,194904064,22937600,159121408,53608448,108396544,194772992,22675456,158990336,53346304,108265472,195166208,22806528,158859264,53215232,108134400,195035136,4194304,158728192,53084160,108003328,195297280,4325376,158597120,
52953088,107872256,194510848,4063232,158466048,52822016,127401984,194641920,3932160,158334976,52690944,127270912,194248704,3801088,158203904,52559872,127139840,194117632,3670016,158072832,52428800,126877696,194379776,3538944,157941760,
52297728,127008768,193855488,3407872,157810688,52166656,126746624,193986560,3276800,157679616,52035584,126615552,193724416,3145728,157548544,51904512,126484480,212205568,3014656,157417472,51773440,126353408,212074496,2883584,157286400,
51642368,126222336,211550208,2752512,157155328,51511296,126091264,210894848,2621440,157024256,51380224,125960192,211943424,2490368,156893184,51249152,125829120,211419136,2359296,156762112,51118080,125698048,211681280,2228224,156631040,
50987008,125566976,211812352,1966080,156499968,50855936,125435904,211025920,2097152,156368896,50593792,125304832,211156992,1835008,156237824,50724864,125173760,211288064,162004992,156106752,50462720,125042688,210501632,162398208,155975680,
50331648,124911616,210763776,162660352,155844608,50200576,124780544,210632704,162267136,155713536,50069504,124649472,210239488,162136064,155451392,49938432,124518400,210108416,161873920,155582464,49807360,124387328,210370560,161742848,155320320,
49676288,124256256,209977344,165412864,155189248,49545216,124125184,209321984,165281792,155058176,49414144,123994112,209715200,165150720,154927104,49283072,123863040,209190912,165019648,144048128,49152000,123731968,209584128,164495360,154664960,
49020928,123600896,209453056,164757504,154796032,48889856,123469824,209846272,164626432,154271744,48758784,123338752,208928768,164364288,154402816,48627712,123207680,208797696,164888576,154533888,48496640,123076608,209059840,164102144,154140672,
48365568,122945536,208404480,164233216,154009600,48103424,122814464,208535552,163971072,153878528,48234496,122683392,208666624,163840000,153747456,47972352,122552320,208273408,163446784,153616384,47841280,122421248,208011264,163577856,153485312,
47710208,122290176,208142336,163184640,153354240,47579136,122159104,207880192,163053568,153092096,47448064,122028032,207749120,163708928,153223168,47316992,121896960,207486976,163315712,152961024,47185920,121765888,207355904,162922496,152698880,
47054848,121634816,207224832,162791424,152829952,46923776,121503744,207618048,162529280,152174592,46792704,121372672,207093760,175374336,152043520,46661632,121241600,206569472,175243264,152567808,46530560,121110528,206831616,175112192,152436736,
46399488,141819904,206962688,174981120,152305664,46268416,141688832,206700544,174850048,151912448,46137344,141557760,206438400,174718976,151781376,46006272,141426688,206307328,184680448,151650304,45875200,141295616,225705984,186777600,151519232,
45744128,141033472,225443840,187170816,151388160,45613056,141164544,224657408,186646528,151257088,75104256,140902400,225181696,187039744,151126016,72351744,140771328,225312768,186908672,150994944,72220672,140640256,225050624,186384384,150863872,
72089600,140509184,224919552,186253312,150601728,71958528,140378112,224788480,186122240,150732800,71827456,140247040,224526336,185991168,150470656,71696384,140115968,224264192,186515456,150339584,71565312,139984896,224133120,185860096,150208512,
71434240,139853824,223739904,185466880,150077440,71303168,139722752,224395264,185335808,149422080,71172096,139591680,224002048,184942592,149815296,71041024,139460608,223870976,185204736,149291008,70909952,139329536,223608832,185729024,149684224,
70647808,139198464,223477760,185073664,149553152,70778880,139067392,223346688,185597952,149159936,70516736,138936320,223215616,184811520,149946368,70385664,138805248,223084544,188743680,149028864,70254592,138674176,222953472,188612608,148897792,
70123520,138543104,222822400,188481536,148766720,69992448,138412032,222691328,188219392,148373504,69861376,138280960,222560256,188350464,148635648,69730304,138149888,222429184,193593344,148504576,69599232,138018816,222298112,193462272,148242432,
69468160,137887744,221642752,193331200,148111360,69337088,137756672,222035968,193200128,147849216,69206016,137625600,222167040,193069056,147980288,69074944,137363456,221904896,192937984,147587072,68943872,137494528,221249536,192806912,147324928,
68812800,137232384,221773824,192675840,147193856,68681728,137101312,221380608,192544768,147062784,68550656,136970240,221511680,192413696,147718144,68288512,136839168,220987392,192282624,147456000,68419584,136708096,220856320,192151552,146931712,
68026368,136577024,220725248,192020480,146800640,68157440,136445952,221118464,191365120,146669568,67895296,136314880,220594176,191496192,146538496,67764224,136183808,220463104,191889408,146407424,67633152,136052736,220332032,191758336,146276352,
67502080,135921664,220200960,191234048,146145280,67371008,135790592,219676672,191627264,146014208,67239936,135659520,219938816,190971904,145883136];

const TBridgeHEROMINER = ({ setisLoading, txupdate, setTxupdate, erc721ABI, tbridgeNFTABI, salmBalance, aguaBalance, cosmosBalance, goldBalance, dmBalance, engyBalance, gemBalance, erc20ABI, uniTokensBridgeABI, bridgebalGold, bridgebalDm, cmmBalance, cmmBkcBalance }) => {
    let { address } = useAccount()
    // let address = '0x0A071C71C2502ef7273eedFeFa54E23329e62e9f'
    const { chain } = useNetwork()

    const [nft, setNft] = React.useState([])
    const [nft2, setNft2] = React.useState([])

    const [substanceSelected, setSubstanceSelected] = React.useState("SALM")
    const [depositGas, setDepositGas] = React.useState('')
    const [productSelected, setProductSelected] = React.useState("DM")
    const [depositProduct, setDepositProduct] = React.useState('')
    const [depositCmm, setDepositCmm] = React.useState('')
    const [withdrawCmm, setWithdrawCmm] = React.useState('')

    React.useEffect(() => {
        window.scrollTo(0, 0)
        const herocatBKCSC = new ethers.Contract(herocatBKC, erc721ABI, providerBKC)
        const herocatBBQSC = new ethers.Contract(herocatBBQ, erc721ABI, providerBBQ)
        setNft([])
        
        const thefetch = async () => {
            let nfts = []
            
            const walletFilter = await herocatBKCSC.filters.Transfer(null, address, null)
            const walletEvent = await herocatBKCSC.queryFilter(walletFilter,8248906, "latest")
            const walletMap = await Promise.all(walletEvent.map(async (obj) => String(obj.args.tokenId)))
            const walletRemoveDup = walletMap.filter((obj, index) => walletMap.indexOf(obj) === index)
            const data = address !== null && address !== undefined ? await readContracts({
                contracts: walletRemoveDup.map((item) => (
                    {
                        address: herocatBKC,
                        abi: erc721ABI,
                        functionName: 'ownerOf',
                        args: [String(item)],
                        chainId: 96
                    }
                ))
            }) : [Array(walletRemoveDup.length).fill('')]

            let yournftwallet = []
            for (let i = 0; i <= walletRemoveDup.length - 1 && address !== null && address !== undefined; i++) {
                if (data[i].result.toUpperCase() === address.toUpperCase()) {
                    yournftwallet.push({Id: String(walletRemoveDup[i])})
                }
            }

            const data2 = address !== null && address !== undefined ? await readContracts({
                contracts: yournftwallet.map((item) => (
                    {
                        address: herocatBKC,
                        abi: erc721ABI,
                        functionName: 'tokenURI',
                        args: [String(item.Id)],
                        chainId: 96
                    }
                ))
            }) : [Array(yournftwallet.length).fill('')]

            for (let i = 0; i <= yournftwallet.length - 1; i++) {
                const nftipfs = data2[i].result
                let nft = {name: "", image: "", description: "", attributes: ""}
                try {
                    const response = await fetch(nftipfs)
                    nft = await response.json()
                } catch {}

                nfts.push({
                    Id: yournftwallet[i].Id,
                    Name: nft.name + ' #' + yournftwallet[i].Id,
                    Image: nft.image,
                    Description: nft.description,
                    Attribute: nft.attributes,
                })
            }

            if (nfts.length === 0) { nfts.push(null) }

            let nfts2 = []
            
            const wallet2Filter = await herocatBBQSC.filters.Transfer(null, address, null)
            const wallet2Event = await herocatBBQSC.queryFilter(wallet2Filter, 3844939, "latest")
            const wallet2Map = await Promise.all(wallet2Event.map(async (obj) => String(obj.args.tokenId)))
            const wallet2RemoveDup = wallet2Map.filter((obj, index) => wallet2Map.indexOf(obj) === index)
            const data3 = address !== null && address !== undefined ? await readContracts({
                contracts: wallet2RemoveDup.map((item) => (
                    {
                        address: herocatBBQ,
                        abi: erc721ABI,
                        functionName: 'ownerOf',
                        args: [String(item)],
                        chainId: 190
                    }
                ))
            }) : [Array(wallet2RemoveDup.length).fill('')]

            let yournftwallet2 = []
            for (let i = 0; i <= wallet2RemoveDup.length - 1 && address !== null && address !== undefined; i++) {
                if (data3[i].result.toUpperCase() === address.toUpperCase()) {
                    yournftwallet2.push({Id: String(wallet2RemoveDup[i])})
                }
            }

            const data4 = address !== null && address !== undefined ? await readContracts({
                contracts: yournftwallet2.map((item) => (
                    {
                        address: herocatBBQ,
                        abi: erc721ABI,
                        functionName: 'tokenURI',
                        args: [String(item.Id)],
                        chainId: 190
                    }
                ))
            }) : [Array(yournftwallet2.length).fill('')]

            for (let i = 0; i <= yournftwallet2.length - 1; i++) {
                const nftipfs = data4[i].result
                let nft = {name: "", image: "", description: "", attributes: ""}
                try {
                    const response = await fetch(nftipfs.replace("ipfs://", "https://apricot-secure-ferret-190.mypinata.cloud/ipfs/"))
                    nft = await response.json()
                } catch {}

                nfts2.push({
                    Id: yournftwallet2[i].Id,
                    Name: nft.name + ' #' + yournftwallet2[i].Id,
                    Image: nft.image.replace("ipfs://", "https://apricot-secure-ferret-190.mypinata.cloud/ipfs/"),
                    Description: nft.description,
                    Attribute: nft.attributes,
                })
            }

            if (nfts2.length === 0) { nfts2.push(null) }
            
            return [
                nfts, nfts2
            ]
        }

        const promise = thefetch()

        const getAsync = () =>
            new Promise((resolve) => 
                setTimeout(
                    () => resolve(promise), 1000
                )
            )

        getAsync().then(result => {
            setNft(result[0])
            setNft2(result[1])
        })

    }, [address, txupdate, erc721ABI])

    const depositHRMHandle = async (_nftId) => {
        setisLoading(true)
        try {
            const nftAllow = await readContract({
                address: herocatBKC,
                abi: erc721ABI,
                functionName: 'getApproved',
                args: [_nftId],
            })
            if (nftAllow.toUpperCase() !== bkcBridge.toUpperCase()) {
                const config0 = await prepareWriteContract({
                    address: herocatBKC,
                    abi: erc721ABI,
                    functionName: 'approve',
                    args: [bkcBridge, _nftId],
                })
                const { hash: hash0 } = await writeContract(config0)
                await waitForTransaction({ hash: hash0 })
            }        
            const config = await prepareWriteContract({
                address: bkcBridge,
                abi: tbridgeNFTABI,
                functionName: 'receiveNFTs',
                args: [_nftId],
                value: ethers.utils.parseEther('1'),
                chainId: 96,
            })
            const { hash: hash1 } = await writeContract(config)
            await waitForTransaction({ hash: hash1 })
            setTxupdate(hash1)
        } catch {}
        setisLoading(false)
    }
    const withdrawHRMHandle = async (_nftId) => {
        setisLoading(true)
        try {
            const nftAllow = await readContract({
                address: herocatBBQ,
                abi: erc721ABI,
                functionName: 'getApproved',
                args: [_nftId],
            })
            if (nftAllow.toUpperCase() !== bbqBridge.toUpperCase()) {
                const config0 = await prepareWriteContract({
                    address: herocatBBQ,
                    abi: erc721ABI,
                    functionName: 'approve',
                    args: [bbqBridge, _nftId],
                })
                const { hash: hash0 } = await writeContract(config0)
                await waitForTransaction({ hash: hash0 })
            }       
            const config = await prepareWriteContract({
                address: bbqBridge,
                abi: tbridgeNFTABI,
                functionName: 'receiveNFTs',
                args: [_nftId],
                value: ethers.utils.parseEther('800'),
                chainId: 190,
            })
            const { hash: hash1 } = await writeContract(config)
            await waitForTransaction({ hash: hash1 })
            setTxupdate(hash1)
        } catch {}
        setisLoading(false)
    }

    const depositTokensFromBKCHandle = async (_index) => {
        setisLoading(true)
        let tokenAddr = null
        let depositAmount = null
        if (_index === 1) {
            tokenAddr = salmBKC
            depositAmount = ethers.utils.parseEther(String(depositGas))
        } else if (_index === 2) {
            tokenAddr = aguaBKC
            depositAmount = depositGas
        } else if (_index === 3) {
            tokenAddr = cosmosBKC
            depositAmount = ethers.utils.parseEther(String(depositGas))
        } else if (_index === 6) {
            tokenAddr = cmmBKC
            depositAmount = ethers.utils.parseEther(String(depositCmm))
        }
        try {
            const tokenAllow = await readContract({
                address: tokenAddr,
                abi: erc20ABI,
                functionName: 'allowance',
                args: [address, bkcTokensBridge],
            })
            if (tokenAllow < Number(depositAmount)) {
                const config0 = await prepareWriteContract({
                    address: tokenAddr,
                    abi: erc20ABI,
                    functionName: 'approve',
                    args: [bkcTokensBridge, ethers.utils.parseEther(String(10**8))],
                })
                const { hash: hash0 } = await writeContract(config0)
                await waitForTransaction({ hash: hash0 })
            }
            const config = await prepareWriteContract({
                address: bkcTokensBridge,
                abi: uniTokensBridgeABI,
                functionName: 'receiveTokens',
                args: [_index, depositAmount],
                value: ethers.utils.parseEther('1'),
                chainId: 96,
            })
            const { hash: hash1 } = await writeContract(config)
            await waitForTransaction({ hash: hash1 })
            setTxupdate(hash1)
        } catch (e) {
            console.log(e)
        }
        setisLoading(false)
    }
    const depositTokensFromBBQHandle = async (_index) => {
        setisLoading(true)
        try {
            const tokenAllow = await readContract({
                address: gemBBQ,
                abi: erc20ABI,
                functionName: 'allowance',
                args: [address, bbqTokensBridge],
            })
            if (tokenAllow < Number(ethers.utils.parseEther(String(depositProduct)))) {
                const config0 = await prepareWriteContract({
                    address: gemBBQ,
                    abi: erc20ABI,
                    functionName: 'approve',
                    args: [bbqTokensBridge, ethers.utils.parseEther(String(10**8))],
                })
                const { hash: hash0 } = await writeContract(config0)
                await waitForTransaction({ hash: hash0 })
            }
            const config = await prepareWriteContract({
                address: bbqTokensBridge,
                abi: uniTokensBridgeABI,
                functionName: 'receiveTokens',
                args: [_index, ethers.utils.parseEther(String(depositProduct))],
                value: ethers.utils.parseEther('800'),
                chainId: 190,
            })
            const { hash: hash1 } = await writeContract(config)
            await waitForTransaction({ hash: hash1 })
            setTxupdate(hash1)
        } catch {}
        setisLoading(false)
    }
    const depositTokensFromOPHandle = async (_index) => {
        setisLoading(true)
        try {
            const tokenAllow = await readContract({
                address: cmmOP,
                abi: erc20ABI,
                functionName: 'allowance',
                args: [address, opTokensBridge],
            })
            if (tokenAllow < Number(ethers.utils.parseEther(String(withdrawCmm)))) {
                const config0 = await prepareWriteContract({
                    address: cmmOP,
                    abi: erc20ABI,
                    functionName: 'approve',
                    args: [opTokensBridge, ethers.utils.parseEther(String(10**8))],
                })
                const { hash: hash0 } = await writeContract(config0)
                await waitForTransaction({ hash: hash0 })
            }
            const config = await prepareWriteContract({
                address: opTokensBridge,
                abi: uniTokensBridgeABI,
                functionName: 'receiveTokens',
                args: [_index, ethers.utils.parseEther(String(withdrawCmm))],
                value: ethers.utils.parseEther('0.003'),
                chainId: 10,
            })
            const { hash: hash1 } = await writeContract(config)
            await waitForTransaction({ hash: hash1 })
            setTxupdate(hash1)
        } catch {}
        setisLoading(false)
    }

    return (
        <>
            <div style={{width: "70%", padding: "40px 45px 40px 0", margin: "10px 0", background: "transparent", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "space-between", flexWrap: "wrap", fontSize: "16px"}}>
                <div style={{height: "80%", padding: "40px", display: "flex", flexDirection: "column", alignItems: "flex-start", justifyContent: "center"}}>
                    <div style={{width: "300px", marginBottom: "20px", textAlign: "initial", color: "#bdc2c4"}}>Bridging Fee</div>
                    <div style={{fontSize: "30px"}}>From BKC 1 KUB/TX; From BBQ 800 CMD/TX; From OP Mainnet 0.0003 ETH</div>
                </div>
            </div>
            <div style={{height: "560px", marginBottom: "20px", width: "1200px", maxWidth: "90%", display: "flex", flexDirection: "column", alignItems: "flex-start", justifyContent: "space-between", flexWrap: "wrap", fontSize: "16px"}}>
                <div style={{width: "40%", height: "460px", padding: "40px 10px", background: "rgb(206, 208, 207)", boxShadow: "rgba(0, 0, 0, 0.35) 4px 4px 10px 0px, rgb(255, 255, 255) 1px 1px 0px 1px inset, rgb(136, 140, 143) -1px -1px 0px 1px inset", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "space-around", flexWrap: "wrap"}}>
                    <select style={{padding: "1px", border: "none", borderRadius: "8px", fontSize: "16px"}} className="pixel" value={substanceSelected} onChange={(event) => {setSubstanceSelected(event.target.value)}}>
                        <option value="SALM">SALMON</option>
                        <option value="AGUA">AGUA</option>
                        <option value="COSMOS">COSMOS</option>
                    </select>
                    <input
                        style={{width: "175px", maxWidth: "70%", padding: "10px", margin: "10px 0", backgroundColor: "#fff", color: "#000", border: "2px solid", borderColor: "rgb(136, 140, 143) rgb(255, 255, 255) rgb(255, 255, 255) rgb(136, 140, 143)"}}
                        type="number"
                        step="1"
                        min="1"
                        placeholder={"0.0 " + substanceSelected}
                        value={depositGas}
                        onChange={(event) => setDepositGas(event.target.value)}
                    ></input>
                    {chain.id === 96 && address !== null && address !== undefined ? 
                        <div 
                            style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", borderRadius: "0", fontSize: "12px"}} 
                            className="button" 
                            onClick={() => {
                                if (substanceSelected === "SALM") {
                                    depositTokensFromBKCHandle(1)
                                } else if (substanceSelected === "AGUA") {
                                    depositTokensFromBKCHandle(2)
                                } else if (substanceSelected === "COSMOS") {
                                    depositTokensFromBKCHandle(3)
                                }
                            }}
                        >
                            BRIDGE TO BBQ CHAIN
                        </div> : 
                        <div style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", background: "rgb(206, 208, 207)", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", textShadow: "rgb(255, 255, 255) 1px 1px", borderRadius: "0", color: "rgb(136, 140, 143)", cursor: "not-allowed", fontSize: "12px"}} className="button">BRIDGE TO BBQ CHAIN</div>
                    }
                    <div style={{width: "92%", margin: "20px 0", color: "#000", textAlign: "left", cursor: "pointer"}}>Balance: {Number(0).toFixed(4)} {substanceSelected}</div>
                    <div style={{width: "92%", margin: "10px 0", color: "gray", textAlign: "left", paddingBottom: "5px", borderBottom: "1px dotted gray"}}>Will receive: {substanceSelected === "SALM" && Number((depositGas / 100)).toFixed(3)}{substanceSelected === "AGUA" && Number((depositGas / 100000)).toFixed(3)}{substanceSelected === "COSMOS" && Number((depositGas / 1000)).toFixed(3)} ENGY</div>
                    <div style={{width: "92%", margin: "10px 0", color: "gray", textAlign: "left", paddingBottom: "5px", borderBottom: "1px dotted gray",  display: "flex", alignItems: "center"}}>
                        <div>BITKUB CHAIN Balance: {substanceSelected === "SALM" && Number(salmBalance).toLocaleString('en-US', {maximumFractionDigits:2})}{substanceSelected === "AGUA" && Number(aguaBalance).toLocaleString('en-US', {maximumFractionDigits:2})}{substanceSelected === "COSMOS" && Number(cosmosBalance).toLocaleString('en-US', {maximumFractionDigits:2})} {substanceSelected}</div>
                        {substanceSelected === "SALM" &&
                            <img 
                                src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/bafkreicj63qksujn46s6skyyvqeny2fmptp2eu5u6hcicawalqjhtopm34"
                                width="20"
                                alt="$SALM"
                                style={{cursor: "crosshair", marginLeft: "5px"}}
                                onClick={async () => {
                                    await ethereum.request({
                                        method: 'wallet_watchAsset',
                                        params: {
                                            type: 'ERC20',
                                            options: {
                                                address: salmBKC,
                                                symbol: 'SALM',
                                                decimals: 18,
                                                image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/bafkreicj63qksujn46s6skyyvqeny2fmptp2eu5u6hcicawalqjhtopm34',
                                            },
                                        },
                                    })
                                }}
                            />
                        }
                        {substanceSelected === "COSMOS" &&
                            <img 
                                src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/bafkreidcxukia62wzaaes6wpsdgpw3yjshrjm7nwijwldxdthkepsebumq"
                                width="20"
                                alt="$CMOS"
                                style={{cursor: "crosshair", marginLeft: "5px"}}
                                onClick={async () => {
                                    await ethereum.request({
                                        method: 'wallet_watchAsset',
                                        params: {
                                            type: 'ERC20',
                                            options: {
                                                address: cosmosBKC,
                                                symbol: 'CMOS',
                                                decimals: 18,
                                                image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/bafkreidcxukia62wzaaes6wpsdgpw3yjshrjm7nwijwldxdthkepsebumq',
                                            },
                                        },
                                    })
                                }}
                            />
                        }
                    </div>
                    <div style={{width: "92%", margin: "10px 0", color: "gray", textAlign: "left", paddingBottom: "5px", borderBottom: "1px dotted gray", display: "flex", alignItems: "center"}}>
                        <div>BBQ CHAIN Balance: {Number(engyBalance).toLocaleString('en-US', {maximumFractionDigits:2})} ENGY</div>
                        <img 
                            src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmYyCnpA39K7F7iu9BR9YdPJTfXfzzFVhQuu4RT1y7XffB"
                            width="20"
                            alt="$HRM-ENGY"
                            style={{cursor: "crosshair", marginLeft: "5px"}}
                            onClick={async () => {
                                await ethereum.request({
                                    method: 'wallet_watchAsset',
                                    params: {
                                        type: 'ERC20',
                                        options: {
                                            address: engyBBQ,
                                            symbol: 'HRM-ENGY',
                                            decimals: 18,
                                            image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmYyCnpA39K7F7iu9BR9YdPJTfXfzzFVhQuu4RT1y7XffB',
                                        },
                                    },
                                })
                            }}
                        />
                    </div>
                    <div style={{width: "92%", margin: "10px 0 20px 0", textAlign: "left", color: "red"}}>⚠️ WARN: This operation is one-way bridging!</div>
                </div>

                <div style={{width: "40%", height: "460px", padding: "40px 10px", background: "rgb(206, 208, 207)", boxShadow: "rgba(0, 0, 0, 0.35) 4px 4px 10px 0px, rgb(255, 255, 255) 1px 1px 0px 1px inset, rgb(136, 140, 143) -1px -1px 0px 1px inset", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "space-around", flexWrap: "wrap"}}>
                    <select style={{padding: "1px", border: "none", borderRadius: "8px", fontSize: "16px"}} className="pixel" value={productSelected} onChange={(event) => {setProductSelected(event.target.value)}}>
                        <option value="DM">DIAMOND</option>
                        <option value="GOLD">GOLD</option>
                    </select>
                    <input
                        style={{width: "175px", maxWidth: "70%", padding: "10px", margin: "10px 0", backgroundColor: "#fff", color: "#000", border: "2px solid", borderColor: "rgb(136, 140, 143) rgb(255, 255, 255) rgb(255, 255, 255) rgb(136, 140, 143)"}}
                        type="number"
                        step="1"
                        min="1"
                        placeholder="0.0 GEMSTONE"
                        value={depositProduct}
                        onChange={(event) => setDepositProduct(event.target.value)}
                    ></input>
                    {chain.id === 190 && address !== null && address !== undefined ? 
                        <div 
                            style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", borderRadius: "0", fontSize: "12px"}} 
                            className="button"
                            onClick={() => {
                                if (productSelected === "GOLD") {
                                    depositTokensFromBBQHandle(2)
                                } else if (productSelected === "DM") {
                                    depositTokensFromBBQHandle(3)
                                }
                            }}
                        >
                            BRIDGE TO BITKUB CHAIN
                        </div> : 
                        <div style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", background: "rgb(206, 208, 207)", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", textShadow: "rgb(255, 255, 255) 1px 1px", borderRadius: "0", color: "rgb(136, 140, 143)", cursor: "not-allowed", fontSize: "12px"}} className="button">BRIDGE TO BITKUB CHAIN</div>
                    }
                    <div style={{width: "92%", margin: "20px 0", color: "#000", textAlign: "left", cursor: "pointer"}}>Balance: {Number(0).toFixed(4)} GEM</div>
                    <div style={{width: "92%", margin: "10px 0", color: "gray", textAlign: "left", paddingBottom: "5px", borderBottom: "1px dotted gray"}}>Will receive: {productSelected === "GOLD" && Number((depositProduct)).toFixed(3)}{productSelected === "DM" && Number((depositProduct / 5)).toFixed(3)} {productSelected} (Vault Remaining: {productSelected === "GOLD" && Number(bridgebalGold).toFixed(3)}{productSelected === "DM" && Number(bridgebalDm).toFixed(3)})</div>
                    <div style={{width: "92%", margin: "10px 0", color: "gray", textAlign: "left", paddingBottom: "5px", borderBottom: "1px dotted gray", display: "flex", alignItems: "center"}}>
                        <div>BITKUB CHAIN Balance: {productSelected === "GOLD" && Number(goldBalance).toLocaleString('en-US', {maximumFractionDigits:2})}{productSelected === "DM" && Number(dmBalance).toLocaleString('en-US', {maximumFractionDigits:2})} {productSelected}</div>
                        {productSelected === "GOLD" &&
                            <img 
                                src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmPvFi2ueyCG3fDEgyZT2gwGJ6zfY7PgQs6mzgvFzeErSD"
                                width="20"
                                alt="$GOLD"
                                style={{cursor: "crosshair", marginLeft: "5px"}}
                                onClick={async () => {
                                    await ethereum.request({
                                        method: 'wallet_watchAsset',
                                        params: {
                                            type: 'ERC20',
                                            options: {
                                                address: goldBKC,
                                                symbol: 'GOLD',
                                                decimals: 18,
                                                image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmPvFi2ueyCG3fDEgyZT2gwGJ6zfY7PgQs6mzgvFzeErSD',
                                            },
                                        },
                                    })
                                }}
                            />
                        }
                        {productSelected === "DM" &&
                            <img 
                                src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/Qme5erJ9PcgyEWA5MJNC88tYKGASKJUu3G7CkNARHN7zws"
                                width="20"
                                alt="$DM"
                                style={{cursor: "crosshair", marginLeft: "5px"}}
                                onClick={async () => {
                                    await ethereum.request({
                                        method: 'wallet_watchAsset',
                                        params: {
                                            type: 'ERC20',
                                            options: {
                                                address: dmBKC,
                                                symbol: 'DM',
                                                decimals: 18,
                                                image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/Qme5erJ9PcgyEWA5MJNC88tYKGASKJUu3G7CkNARHN7zws',
                                            },
                                        },
                                    })
                                }}
                            />
                        }
                    </div>
                    <div style={{width: "92%", margin: "10px 0", color: "gray", textAlign: "left", paddingBottom: "5px", borderBottom: "1px dotted gray", display: "flex", alignItems: "center"}}>
                        <div>BBQ CHAIN Balance: {Number(gemBalance).toLocaleString('en-US', {maximumFractionDigits:2})} GEM</div>
                        <img 
                            src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmYLecZgsc6hgV931h3VDhvvXKeMjturKRKyGyTNDxX9JV"
                            width="20"
                            alt="$HRM-GEM"
                            style={{cursor: "crosshair", marginLeft: "5px"}}
                            onClick={async () => {
                                await ethereum.request({
                                    method: 'wallet_watchAsset',
                                    params: {
                                        type: 'ERC20',
                                        options: {
                                            address: gemBBQ,
                                            symbol: 'HRM-GEM',
                                            decimals: 18,
                                            image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmYLecZgsc6hgV931h3VDhvvXKeMjturKRKyGyTNDxX9JV',
                                        },
                                    },
                                })
                            }}
                        />
                    </div>
                    <div style={{width: "92%", margin: "10px 0 20px 0", textAlign: "left", color: "red"}}>⚠️ WARN: This operation is one-way bridging!</div>
                </div>
            </div>
            <div style={{height: "290px", width: "1200px", maxWidth: "90%", display: "flex", flexDirection: "column", alignItems: "flex-start", justifyContent: "space-between", flexWrap: "wrap", fontSize: "16px"}}>
                <div style={{width: "40%", height: "180px", padding: "40px 10px", background: "rgb(206, 208, 207)", boxShadow: "rgba(0, 0, 0, 0.35) 4px 4px 10px 0px, rgb(255, 255, 255) 1px 1px 0px 1px inset, rgb(136, 140, 143) -1px -1px 0px 1px inset", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "space-around", flexWrap: "wrap"}}>
                    <input
                        style={{width: "250px", maxWidth: "70%", padding: "10px", margin: "10px 0", backgroundColor: "#fff", color: "#000", border: "2px solid", borderColor: "rgb(136, 140, 143) rgb(255, 255, 255) rgb(255, 255, 255) rgb(136, 140, 143)"}}
                        type="number"
                        step="1"
                        min="1"
                        placeholder="0.0 CMM"
                        value={depositCmm}
                        onChange={(event) => setDepositCmm(event.target.value)}
                    ></input>
                    {chain.id === 96 && address !== null && address !== undefined ? 
                        <div style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", borderRadius: "0"}} className="button" onClick={() => depositTokensFromBKCHandle(6)}>BRIDGE TO OP</div> : 
                        <div style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", background: "rgb(206, 208, 207)", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", textShadow: "rgb(255, 255, 255) 1px 1px", borderRadius: "0", color: "rgb(136, 140, 143)", cursor: "not-allowed"}} className="button">BRIDGE TO OP</div>
                    }
                    <div style={{width: "92%", margin: "20px 0", color: "#000", textAlign: "left", display: "flex", alignItems: "center"}}>
                        <div>Balance: {Number(cmmBkcBalance).toFixed(4)} CMM [BITKUB CHAIN]</div>
                        <img 
                            src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmWM9sbGBWM3yai8nsDsSXhE9tJZNwSwoE8XG835dJkHco"
                            width="20"
                            alt="$CMM"
                            style={{cursor: "crosshair", marginLeft: "5px"}}
                            onClick={async () => {
                                await ethereum.request({
                                    method: 'wallet_watchAsset',
                                    params: {
                                        type: 'ERC20',
                                        options: {
                                            address: cmmBKC,
                                            symbol: 'CMM',
                                            decimals: 18,
                                            image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmWM9sbGBWM3yai8nsDsSXhE9tJZNwSwoE8XG835dJkHco',
                                        },
                                    },
                                })
                            }}
                        />
                    </div>
                </div>
                <div style={{width: "40%", height: "180px", padding: "40px 10px", background: "rgb(206, 208, 207)", boxShadow: "rgba(0, 0, 0, 0.35) 4px 4px 10px 0px, rgb(255, 255, 255) 1px 1px 0px 1px inset, rgb(136, 140, 143) -1px -1px 0px 1px inset", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "space-around", flexWrap: "wrap"}}>
                    <input
                        style={{width: "250px", maxWidth: "70%", padding: "10px", margin: "10px 0", backgroundColor: "#fff", color: "#000", border: "2px solid", borderColor: "rgb(136, 140, 143) rgb(255, 255, 255) rgb(255, 255, 255) rgb(136, 140, 143)"}}
                        type="number"
                        step="1"
                        min="1"
                        placeholder="0.0 CMM"
                        value={withdrawCmm}
                        onChange={(event) => setWithdrawCmm(event.target.value)}
                    ></input>
                    {chain.id === 10 && address !== null && address !== undefined ?
                        <div style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", borderRadius: "0"}} className="button" onClick={() => depositTokensFromOPHandle(1)}>BRIDGE TO BKC</div> :
                        <div style={{maxHeight: "47px", maxWidth: "fit-content", display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "flex-start", background: "rgb(206, 208, 207)", border: "2px solid", borderColor: "rgb(255, 255, 255) rgb(5, 6, 8) rgb(5, 6, 8) rgb(255, 255, 255)", textShadow: "rgb(255, 255, 255) 1px 1px", borderRadius: "0", color: "rgb(136, 140, 143)", cursor: "not-allowed"}} className="button">BRIDGE TO BKC</div>
                    }
                    <div style={{width: "92%", margin: "20px 0", color: "#000", textAlign: "left", display: "flex", alignItems: "center"}}>
                        <div>Balance: {Number(cmmBalance).toFixed(4)} CMM [OP MAINNET]</div>
                        <img 
                            src="https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmWM9sbGBWM3yai8nsDsSXhE9tJZNwSwoE8XG835dJkHco"
                            width="20"
                            alt="$CMM"
                            style={{cursor: "crosshair", marginLeft: "5px"}}
                            onClick={async () => {
                                await ethereum.request({
                                    method: 'wallet_watchAsset',
                                    params: {
                                        type: 'ERC20',
                                        options: {
                                            address: cmmOP,
                                            symbol: 'CMM',
                                            decimals: 18,
                                            image: 'https://apricot-secure-ferret-190.mypinata.cloud/ipfs/QmWM9sbGBWM3yai8nsDsSXhE9tJZNwSwoE8XG835dJkHco',
                                        },
                                    },
                                })
                            }}
                        />
                    </div>
                </div>
            </div>
            <div style={{width: "1200px", maxWidth: "90%", marginBottom: "40px", textIndent: "20px", fontSize: "18px", letterSpacing: "1px", textAlign: "left", color: "rgb(189, 194, 196)"}} className="bold">BKC NFTs</div>
            {nft.length > 0 ?
                <div style={{width: "1200px", maxWidth: "90%", marginBottom: "80px", display: "flex", flexDirection: "row", alignItems: "flex-start", justifyContent: "flex-start", flexWrap: "wrap"}}>
                    {nft[0] !== null ?
                        <>
                            {nft.map((item, index) => (
                                <>
                                    {eligibleArr.indexOf(Number(item.Id)) !== -1 &&
                                        <div style={{background: "linear-gradient(0deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05)), rgb(11, 11, 34)", boxShadow: "none", border: 0, color: "#fff", justifyContent: "space-around", padding: "15px", margin: "10px"}} className="nftCard" key={index}>
                                            <div style={{width: "150px", height: "150px", display: "flex", justifyContent: "center", overflow: "hidden"}}>
                                                <img src={item.Image} height="100%" alt="Can not load metadata." />
                                            </div>
                                            <div className="emp bold">{item.Name}</div>
                                            <div style={{fontSize: "12px", textAlign: "left", wordBreak: "break-word"}} className="light">{item.Description}</div>
                                            {chain.id === 96 ?
                                                <div style={{alignSelf: "center"}} className="pixel button" onClick={() => depositHRMHandle(item.Id)}>BRIDGE TO BBQ</div> :
                                                <div style={{alignSelf: "center", background: "#e9eaeb", color: "#bdc2c4", cursor: "not-allowed"}} className="pixel button">BRIDGE TO BBQ</div>
                                            }
                                        </div>
                                    }
                                </>
                            ))}
                        </> :
                        <div style={{background: "linear-gradient(0deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05)), rgb(11, 11, 34)", boxShadow: "none", border: 0, color: "#fff", justifyContent: "center", padding: "15px", margin: "10px"}} className="nftCard">
                            {address !== undefined ?
                                <>
                                    <img src="https://l3img.b-cdn.net/ipfs/QmUmf3MEZg99qqLJ6GsewESVum8sm72gfH3wyiVPZGH6HA" width="150" alt="No_NFTs" />
                                    <div style={{marginTop: "30px"}} className="bold">This wallet doesn't have NFTs.</div>
                                </> :
                                <>
                                    <i style={{fontSize: "150px", marginBottom: "30px"}} className="fa fa-sign-in"></i>
                                    <div className="bold">Please connect wallet to view your NFTs.</div>
                                </>
                            }
                        </div>
                    }
                </div> :
                <div style={{width: "72%", marginBottom: "80px", display: "flex", flexDirection: "row", alignItems: "flex-start", justifyContent: "flex-start"}}> 
                    <div className="nftCard" style={{background: "linear-gradient(0deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05)), rgb(11, 11, 34)", boxShadow: "none", border: 0, color: "#fff", padding: "15px", justifyContent: "center"}}>
                        <ThreeDots fill="#fff" />
                        <div className="bold" style={{marginTop: "80px"}}>Loading NFTs...</div>
                    </div>
                </div>
            }
            <div style={{width: "1200px", maxWidth: "90%", marginBottom: "40px", textIndent: "20px", fontSize: "18px", letterSpacing: "1px", textAlign: "left", color: "rgb(189, 194, 196)"}} className="bold">BBQ NFTs</div>
            {nft2.length > 0 ?
                <div style={{width: "1200px", maxWidth: "90%", marginBottom: "20px", display: "flex", flexDirection: "row", alignItems: "flex-start", justifyContent: "flex-start", flexWrap: "wrap"}}>
                    {nft2[0] !== null ?
                        <>
                            {nft2.map((item, index) => (
                                <div style={{background: "linear-gradient(0deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05)), rgb(11, 11, 34)", boxShadow: "none", border: 0, color: "#fff", justifyContent: "space-around", padding: "15px", margin: "10px"}} className="nftCard" key={index}>
                                    <div style={{width: "150px", height: "150px", display: "flex", justifyContent: "center", overflow: "hidden"}}>
                                        <img src={item.Image} height="100%" alt="Can not load metadata." />
                                    </div>
                                    <div className="emp bold">{item.Name}</div>
                                    <div style={{fontSize: "12px", textAlign: "left", wordBreak: "break-word"}} className="light">{item.Description}</div>
                                    {chain.id === 190 ?
                                        <div style={{alignSelf: "center"}} className="pixel button" onClick={() => withdrawHRMHandle(item.Id)}>BRIDGE TO BKC</div> :
                                        <div style={{alignSelf: "center", background: "#e9eaeb", color: "#bdc2c4", cursor: "not-allowed"}} className="pixel button">BRIDGE TO BKC</div>
                                    }
                                </div>
                            ))}
                        </> :
                        <div style={{background: "linear-gradient(0deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05)), rgb(11, 11, 34)", boxShadow: "none", border: 0, color: "#fff", justifyContent: "center", padding: "15px", margin: "10px"}} className="nftCard">
                            {address !== undefined ?
                                <>
                                    <img src="https://l3img.b-cdn.net/ipfs/QmUmf3MEZg99qqLJ6GsewESVum8sm72gfH3wyiVPZGH6HA" width="150" alt="No_NFTs" />
                                    <div style={{marginTop: "30px"}} className="bold">This wallet doesn't have NFTs.</div>
                                </> :
                                <>
                                    <i style={{fontSize: "150px", marginBottom: "30px"}} className="fa fa-sign-in"></i>
                                    <div className="bold">Please connect wallet to view your NFTs.</div>
                                </>
                            }
                        </div>
                    }
                </div> :
                <div style={{width: "1200px", maxWidth: "90%", marginBottom: "20px", display: "flex", flexDirection: "row", alignItems: "flex-start", padding: "15px", justifyContent: "flex-start"}}> 
                    <div className="nftCard" style={{background: "linear-gradient(0deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05)), rgb(11, 11, 34)", boxShadow: "none", border: 0, color: "#fff", padding: "15px", justifyContent: "center"}}>
                        <ThreeDots fill="#fff" />
                        <div className="bold" style={{marginTop: "80px"}}>Loading NFTs...</div>
                    </div>
                </div>
            }
        </>
    )
}
    
export default TBridgeHEROMINER